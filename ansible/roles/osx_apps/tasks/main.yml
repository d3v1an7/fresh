---
# Font
- name: check if font exists
  stat:
    path: "{{ home }}/Library/Fonts/SourceCodePro-Regular.otf"
  register: font

- name: download and unzip font
  unarchive:
    src: https://github.com/adobe-fonts/source-code-pro/archive/release.zip
    dest: /tmp
    copy: no
    creates: /tmp/source-code-pro-release
  when: font.stat.exists == false

- name: copy fonts to library
  synchronize:
    src: /tmp/source-code-pro-release/OTF/
    dest: "{{ home }}/Library/Fonts"
  when: font.stat.exists == false

# Atom
- name: check if atom theme exists
  stat:
    path: "{{ home }}/.atom/packages/base16-eighties-one-dark"
  register: atom_theme

- name: download and unzip atom theme
  unarchive:
    src: https://github.com/robneu/base16-eighties-one-dark/archive/master.zip
    dest: /tmp
    copy: no
    creates: /tmp/base16-eighties-one-dark-master
  when: atom_theme.stat.exists == false

- name: copy theme to atom
  become: yes
  synchronize:
    src: /tmp/base16-eighties-one-dark-master/
    dest: "{{ home }}/.atom/packages/base16-eighties-one-dark/"
  when: atom_theme.stat.exists == false

- name: overwite atom config
  copy:
    content: "{{ atom_config }}"
    dest: "~/.atom/config.cson"
  when: atom_config_overwrite

# iTerm2
- name: check if iterm theme exists
  stat:
    path: "/tmp/base16-eighties.dark.256.itermcolors"
  register: iterm_theme

- name: check if iterm settings exists
  stat:
    path: "{{ home }}/Library/Preferences/com.googlecode.iTerm2.plist"
  register: iterm_settings

- name: download iterm theme
  get_url:
    validate_certs: False
    url: https://raw.githubusercontent.com/chriskempson/base16-iterm2/master/base16-eighties.dark.256.itermcolors
    dest: /tmp
  when: iterm_theme.stat.exists == false

- name: open iterm to init preference files
  shell: open -a iTerm && sleep 2 && killall iTerm
  when: iterm_settings.stat.exists == false

- name: write iterm defaults
  osx_defaults:
    domain: com.googlecode.iterm2
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
  with_items:
    # Don’t display the annoying prompt when quitting iTerm
    - { key: "PromptOnQuit", type: "bool", value: "false" }
    # Don’t display the annoying update prompt
    - { key: "SUEnableAutomaticChecks", type: "bool", value: "false" }

- name: open iterm again to complete preference files
  # We can close nicely without prompt now
  shell: open -a iTerm && sleep 2 && osascript -e 'quit app "iTerm"'
  when: iterm_settings.stat.exists == false

- name: wait for iterm preference file to populate
  wait_for:
    path: "{{ home }}/Library/Preferences/com.googlecode.iTerm2.plist"
    search_regex: "New Bookmarks"

- name: write iterm defaults (plistbuddy)
  shell: /usr/libexec/PlistBuddy -c "{{ item }}" "{{ home }}/Library/Preferences/com.googlecode.iTerm2.plist"
  with_items:
    # Set font
    - "Set 'New Bookmarks':0:'Normal Font' 'SourceCodePro-Regular 13'"
    # Enable forever scroll
    - "Set 'New Bookmarks':0:'Unlimited Scrollback' true"
    # Remove default colour settings
    - "Delete 'New Bookmarks':0:'Ansi 0 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 1 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 2 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 3 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 4 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 5 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 6 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 7 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 8 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 9 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 10 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 11 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 12 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 13 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 14 Color'"
    - "Delete 'New Bookmarks':0:'Ansi 15 Color'"
    - "Delete 'New Bookmarks':0:'Background Color'"
    - "Delete 'New Bookmarks':0:'Bold Color'"
    - "Delete 'New Bookmarks':0:'Cursor Color'"
    - "Delete 'New Bookmarks':0:'Cursor Text Color'"
    - "Delete 'New Bookmarks':0:'Foreground Color'"
    - "Delete 'New Bookmarks':0:'Selected Text Color'"
    - "Delete 'New Bookmarks':0:'Selection Color'"
    # Merge new colour settings from file
    - "Merge /tmp/base16-eighties.dark.256.itermcolors 'New Bookmarks':0"
  when: iterm_config_overwrite

# iStat Menus 5
- name: write istat licence
  osx_defaults:
    domain: com.bjango.istatmenus
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
  with_items:
    - { key: "license5", type: "string", value: "{{ licence_istat }}" }

- name: write istat defaults
  osx_defaults:
    domain: com.bjango.istatmenus5.extras
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
  with_items:
    # Disable diagnostics
    - { key: "Diagnostics_Enabled", type: "int", value: "0" } # Default: key absent
    # CPU bar graph
    - { key: "CPU_MenubarMode", type: "string", value: "1" } # Default: key absent
    # Memory pie graph
    - { key: "Memory_MenubarMode", type: "string", value: "6" } # Default: key absent
    # Network no decimals
    - { key: "Network_DecimalLevel", type: "int", value: "0" } # Default: key absent
    # Sensors display
    - { key: "Sensors_MenubarMode", type: "string", value: "0" } # Default: key absent
    # Time / Date format
    - { key: "Time_MenubarFormat", type: "array", value: "[ 'EE', '\" \"', 'hh', '\":\"', 'mm', '\" \"', 'a' ]" } # Default: key absent
    # Time / Date hide moon
    - { key: "Time_DropdownShowMoon", type: "int", value: "0" } # Default: key absent
    # Time / Date cities
    - { key: "Time_Cities", type: "array", value: "[ '5128581.0000000000000000', '1566083.0000000000000000' ]" } # Default: key absent
    # Opacity
    - { key: "MenubarGraphOpacity-DarkMode", type: "float", value: "0.4418902099132540" } # Default: key absent
    # Skin colour white
    - { key: "MenubarSkinColor", type: "int", value: "8" } # Default: key absent
    # Set order
    # - { key: "StatusItems-Order", type: "array", value: "[ '4', '2', '1', '5', '-1', '7' ]" } # Default: key absent [ '1', '2', '3', '4', '5', '6' ]

- name: write istat defaults (plistbuddy)
  shell: /usr/libexec/PlistBuddy -c "{{ item }}" "{{ home }}/Library/Preferences/com.bjango.istatmenus5.extras.plist"
  with_items:
    # Set order
    # Can't do this with osx_defaults module above, as the array is populated with strings, not integers, which crashes istat -- badly
    - "Delete StatusItems-Order"
    - "Add StatusItems-Order array"
    - "Add StatusItems-Order:0 integer 4"
    - "Add StatusItems-Order:1 integer 2"
    - "Add StatusItems-Order:2 integer 1"
    - "Add StatusItems-Order:3 integer -1"
    - "Add StatusItems-Order:4 integer 5"
    - "Add StatusItems-Order:5 integer 7"
  when: iterm_config_overwrite

# Google Chrome
- name: set google chrome as default browser
  shell: "open --new -a 'Google Chrome' --args --make-default-browser"
  when: "{{ chrome_default_browser }}"

- name: write google chrome defaults
  osx_defaults:
    domain: com.google.Chrome
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
  with_items:
    # Disable the all too sensitive backswipe on trackpads and Magic Mouse
    - { key: "AppleEnableSwipeNavigateWithScrolls", type: "bool", value: "false" } # Default: key absent
    - { key: "AppleEnableMouseSwipeNavigateWithScrolls", type: "bool", value: "false" } # Default: key absent

# Transmission
- name: write transmission defaults
  osx_defaults:
    domain: org.m0k.transmission
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
  with_items:
    # Use `~/Downloads/Torrents` to store incomplete downloads
    - { key: "UseIncompleteDownloadFolder", type: "bool", value: "true" } # Default: key absent
    - { key: "IncompleteDownloadFolder", type: "string", value: "{{ home }}/Downloads/Torrents" } # Default: key absent
    # Don't prompt for confirmation before downloading
    - { key: "DownloadAsk", type: "bool", value: "false" } # Default: key absent
    # Trash original torrent files
    - { key: "DeleteOriginalTorrent", type: "bool", value: "true" } # Default: key absent
    # Hide the donate message
    - { key: "WarningDonate", type: "bool", value: "false" } # Default: key absent
    - { key: "WarningLegal", type: "bool", value: "false" } # Default: key absent

# Alfred 2
- name: write alfred defaults
  osx_defaults:
    domain: "{{ home }}/Library/Application Support/Alfred 2/license.plist"
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
  with_items:
    # Add licence
    - { key: "email", type: "string", value: "{{ licence_alfred_email }}" }
    - { key: "code", type: "string", value: "{{ licence_alfred_code }}" }

- name: find alfred preferences localhash
  find:
    paths: "{{ home }}/Library/Application Support/Alfred 2/Alfred.alfredpreferences/preferences/local"
    file_type: directory
    patterns: "[0-9a-f]{40}"
    use_regex: True
  register: alfred_preferences_localhash

- name: write alfred defaults (plistbuddy)
  shell: /usr/libexec/PlistBuddy -c "{{ item.command }}" "{{ alfred_preferences_localhash.files[0].path }}/{{ item.file }}"
  with_items:
    # Enable clipboard history
    - { command: "Add enabled bool true", file: "features/clipboard/prefs.plist" }
    # Set hotkey to command+space
    - { command: "Set default:key 49", file: "hotkey/prefs.plist" }
    - { command: "Set default:mod 1048576", file: "hotkey/prefs.plist" }
    - { command: "Set default:string Space", file: "hotkey/prefs.plist" }
  register: alfred_plistbuddy
  failed_when: "alfred_plistbuddy.stderr and 'Entry Already Exists' not in alfred_plistbuddy.stderr"
