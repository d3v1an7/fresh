---
# homebrew
- name: set current time and time allowed between updates
  set_fact:
   run_time: "{{ ansible_date_time.epoch }}"
   time_allowed_between_updates: "{{ 60 * 60 * 24 }}" # 24 hr

- name: get last homebrew update
  shell: cd /usr/local/ && git log -1 --format="%ct" HEAD
  register: last_homebrew_update
  changed_when: no

- name: get time since last homebrew update
  set_fact: time_since_update="{{ run_time | int - last_homebrew_update.stdout | int }}"

- name: update homebrew
  homebrew:
    update_homebrew: yes
  when: time_since_update | int > time_allowed_between_updates | int

- name: install homebrew taps
  homebrew_tap:
    name: "{{ item }}"
    state: present
  with_items: "{{ homebrew_taps }}"

- name: install homebrew formulae
  homebrew:
    name: "{{ item }}"
    state: present
  with_items: "{{ homebrew_formulae }}"

- name: install homebrew casks
  homebrew_cask:
    name: "{{ item }}"
    state: present
  with_items: "{{ homebrew_casks }}"

# # homebrew caveats
# - name: create array to store commands that will need to be run later
#   set_fact: run_later="[]"
#
# - name: create array to store apps that will need to be run later
#   set_fact: open_later="[]"
#
# - name: set credit to avoid confusion
#   set_fact: credit="(via {{ home }}/.fresh/ansible/install.yml)"
#
# # $ brew info awscli
# - name: add awscli to .bashrc
#   lineinfile:
#     dest: "{{ shellrc_dir }}"
#     regexp: "{{ item }}"
#     line: "complete -C aws_completer aws # {{ item }} {{ credit }}"
#     create: yes
#     state: present
#   with_items:
#     - "brew info awscli"
#   when: detected_shell == "bash"
#
# - name: add awscli to .zshrc
#   lineinfile:
#     dest: "{{ shellrc_dir }}"
#     regexp: "{{ item }}"
#     line: "source /usr/local/share/zsh/site-functions/_aws # {{ item }} {{ credit }}"
#     create: yes
#     state: present
#   with_items:
#     - "brew info awscli"
#   when: detected_shell == "zsh"
#
# - name: add awscli to run_later
#   set_fact: run_later="{{run_later}} + [ 'aws configure' ]"
#
# # $ brew info bash-completion
# - name: add bash-completion to .bashrc or .zshrc
#   lineinfile:
#     dest: "{{ shellrc_dir }}"
#     regexp: "{{ item }}"
#     line: "if [ -f $(brew --prefix)/etc/bash_completion ]; then; . $(brew --prefix)/etc/bash_completion; fi # {{ item }} {{ credit }}"
#     create: yes
#     state: present
#   with_items:
#     - "brew info bash-completion"
#
# # $ brew info rbenv
# - name: add rbenv to run_later
#   set_fact: run_later="{{run_later}} + [ 'rbenv init' ]"
#
# # $ brew info thefuck
# - name: add thefuck to .bashrc or .zshrc
#   lineinfile:
#     dest: "{{ shellrc_dir }}"
#     regexp: "{{ item }}"
#     line: "eval \"$(thefuck --alias)\" # {{ item }} {{ credit }}"
#     create: yes
#     state: present
#   with_items:
#     - "brew info thefuck"
#
# - name: add thefuck to .bash_profile
#   lineinfile:
#     dest: "{{ home }}/.bash_profile"
#     regexp: "{{ item }}"
#     line: "eval \"$(thefuck --alias)\" # {{ item }} {{ credit }}"
#     create: yes
#     state: present
#   with_items:
#     - "brew info thefuck"
#
# # $ brew cask cat adobe-creative-cloud
# - name: add adobe-creative-cloud to open_later
#   set_fact: open_later="{{open_later}} + [ '/opt/homebrew-cask/Caskroom/adobe-creative-cloud/latest/Creative Cloud Installer.app' ]"
#
# # $ brew cask cat lastpass
# - name: add lastpass to open_later
#   set_fact: open_later="{{open_later}} + [ '/opt/homebrew-cask/Caskroom/lastpass/latest/LastPass Installer.app' ]"
#
# # npm
# - name: install npm packages
#   npm: global=yes name={{ item }}
#   with_items: npm_packages
#
# # rvm
# - name: check latest ruby version
#   shell: echo $(rbenv install -l | grep -v - | tail -1)
#   register: latest_ruby_version
#   changed_when: false
#
# - name: check current ruby version
#   shell: echo $(rbenv version | sed 's/ (.*//')
#   register: current_ruby_version
#   changed_when: false
#
# - name: install latest ruby version
#   shell: rbenv install {{ latest_ruby_version.stdout }}
#   when: latest_ruby_version.stdout is defined and latest_ruby_version.stdout != current_ruby_version.stdout
#
# - name: set latest ruby version
#   shell: rbenv global {{ ruby_version.stdout }}
#   when: latest_ruby_version.stdout is defined and latest_ruby_version.stdout != current_ruby_version.stdout
#
# - name: update rubygems
#   become: yes
#   command: gem update --system
#   when: latest_ruby_version.stdout is defined and latest_ruby_version.stdout != current_ruby_version.stdout
