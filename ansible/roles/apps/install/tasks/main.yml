---
# homebrew
- name: set current time and time allowed between updates
  set_fact:
   run_time: "{{ ansible_date_time.epoch }}"
   time_allowed_between_updates: "{{ 60 * 60 * 24 }}" # 24 hr

- name: get last homebrew update
  shell: cd /usr/local/ && git log -1 --format="%ct" HEAD
  register: last_homebrew_update
  changed_when: no

- name: get time since last homebrew update
  set_fact: time_since_update="{{ run_time | int - last_homebrew_update.stdout | int }}"

- name: update homebrew
  homebrew:
    update_homebrew: yes
  when: time_since_update | int > time_allowed_between_updates | int

- name: install homebrew taps
  homebrew_tap:
    name: "{{ item }}"
    state: present
  with_items: "{{ homebrew_taps }}"

- name: install homebrew formulae
  homebrew:
    name: "{{ item }}"
    state: present
  with_items: "{{ homebrew_formulae }}"

- name: install homebrew casks
  homebrew_cask:
    name: "{{ item }}"
    state: present
  with_items: "{{ homebrew_casks }}"

# npm
- name: install npm packages
  npm:
    global: yes
    name: "{{ item }}"
  with_items: "{{ npm_packages }}"

# rvm
- name: check latest ruby version
  shell: echo $(rbenv install -l | grep -v - | tail -1)
  register: latest_ruby_version
  changed_when: false

- name: install latest ruby version
  shell: rbenv install --force {{ latest_ruby_version.stdout }}
  when: latest_ruby_version.stdout is defined and latest_ruby_version.stdout != current_ruby_version.stdout

- name: set latest ruby version
  shell: rbenv global {{ latest_ruby_version.stdout }}
  when: latest_ruby_version.stdout is defined and latest_ruby_version.stdout != current_ruby_version.stdout

- name: update rubygems
  become: yes
  command: gem update --system
  when: latest_ruby_version.stdout is defined and latest_ruby_version.stdout != current_ruby_version.stdout
