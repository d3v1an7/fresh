#!/bin/bash

set -e

dir="${HOME}/.fresh"
config="${HOME}/.fresh/config.yaml"
log="${HOME}/.fresh/fresh.log"
symbol_pass="âœ“"
symbol_info="*"
symbol_warn="!"
symbol_error="x"
colour_pass=$(tput setaf 2)
colour_info=$(tput setaf 4)
colour_warn=$(tput setaf 3)
colour_error=$(tput setaf 1)
colour_reset=$(tput sgr0)

utils_print_heading() {
  # Credit: http://wiki.bash-hackers.org/snipplets/print_horizontal_line
  local start=$'\e(0' end=$'\e(B' line='qqqqqqqqqqqqqqqq'
  local cols="${COLUMNS:-$(tput cols)}"
  while (("${#line}" < cols)); do line+="${line}"; done
  echo
  printf '%s%s%s\n' "${start}" "${line:0:cols}" "${end}"
  echo "  ${1}"
  printf '%s%s%s\n' "${start}" "${line:0:cols}" "${end}"
  echo
}

utils_print_status() {
  symbol="symbol_${1}"
  colour="colour_${1}"
  message="${2}"
  echo -e "${!colour}${!symbol}${colour_reset} ${message}"
}

utils_sudo_keep_alive() {
  utils_print_heading "Sudo check"
  # Credit: https://github.com/mathiasbynens/dotfiles/blob/master/.macos
  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
  utils_print_status "pass" "Passed"
}

utils_defaults() {
  defaults=$(yq -r "${2} | to_entries[]" ~/.fresh/config.yaml)
  echo $defaults | jq -r '(.value[]) as $item | "\(.key)|\($item.key)|\($item.type)|\($item.value)"' | while read item; do
    array_fix=$(echo "${item}"  | tr '|' '\n')
    local IFS=$'\n'
    array=(${array_fix})
    domain="${array[0]}"
    item_key="${array[1]}"
    item_type="${array[2]}"
    item_value="${array[3]}"
    # Fix home path
    domain="${domain/\~/$HOME}"
    item_value="${item_value/\~/$HOME}"
    # Insert UUID if required
    # Credit: http://www.commandlinefu.com/commands/view/13592/get-hardware-uuid-in-mac-os-x
    uuid="$(system_profiler SPHardwareDataType | awk '/UUID/ { print $3; }')"
    domain="${domain/UUID/$uuid}"
    if [ "${1}" == "plistbuddy" ]; then
      echo "${item_key}"
      echo "Previous value:"
      /usr/libexec/PlistBuddy -c "Print :${item_key}" "${domain}" || true
      /usr/libexec/PlistBuddy -c "Delete :${item_key}" "${domain}" &> /dev/null || true
      echo "New value:"
      /usr/libexec/PlistBuddy -c "Add :${item_key} ${item_type} ${item_value}" "${domain}" || true
      echo "${item_value}"
      echo
    elif [ "${1}" == "bork" ]; then
      bork do ok defaults "${domain} ${item_key} ${item_type} ${item_value}" || true
    elif [ "${1}" == "defaults" ]; then
      echo "${item_key}"
      # Too noisy when outputting the whole array
      # echo "Previous value:"
      # defaults read "${domain}" "${item_key}" || true
      echo "New value:"
      defaults write "${domain}" "${item_key}" "-${item_type}" "${item_value}"
      echo "${item_value}"
      echo
    elif [ "${1}" == "global" ]; then
      echo "${item_key}"
      echo "Previous value:"
      sudo defaults read "${domain}" "${item_key}" || true
      echo "New value:"
      sudo defaults write "${domain}" "${item_key}" "-${item_type}" "${item_value}"
      echo "${item_value}"
      echo
    fi
  done
}

utils_error_exit() {
  utils_print_heading "${1}"
  echo "${@:2}"
  echo
  exit 1
}

trap "utils_error_exit 'Setup did not complete!' 'Received signal SIGHUP.'" SIGHUP
trap "utils_error_exit 'Setup did not complete!' 'Received signal SIGINT.'" SIGINT
trap "utils_error_exit 'Setup did not complete!' 'Received signal SIGTERM.'" SIGTERM
trap "utils_error_exit 'Setup did not complete!' 'Scroll up for more details about what went wrong.'" ERR
