#!/bin/bash
# shellcheck disable=SC2034 # Not stressed about unused variables, as they are used elsewhere

set -e

dir="${HOME}/.fresh"
config="${HOME}/.fresh/config.yaml"
log="${HOME}/.fresh/fresh.log"
symbol_pass="âœ“"
symbol_info="*"
symbol_warn="!"
symbol_error="x"
colour_pass=$(tput setaf 2)
colour_info=$(tput setaf 4)
colour_warn=$(tput setaf 3)
colour_error=$(tput setaf 1)
colour_reset=$(tput sgr0)

utils_print_heading() {
  # Credit: http://wiki.bash-hackers.org/snipplets/print_horizontal_line
  local start=$'\e(0' end=$'\e(B' line='qqqqqqqqqqqqqqqq'
  local cols="${COLUMNS:-$(tput cols)}"
  while (("${#line}" < cols)); do line+="${line}"; done
  echo
  printf '%s%s%s\n' "${start}" "${line:0:cols}" "${end}"
  echo "  ${1}"
  printf '%s%s%s\n' "${start}" "${line:0:cols}" "${end}"
  echo
}

utils_print_status() {
  symbol="symbol_${1}"
  colour="colour_${1}"
  message="${2}"
  echo -e "${!colour}${!symbol}${colour_reset} ${message}"
}

utils_sudo_keep_alive() {
  utils_print_heading "Sudo check"
  # Credit: https://github.com/mathiasbynens/dotfiles/blob/master/.macos
  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
  utils_print_status "pass" "Sudo passed"
}

utils_plutil_extract() {
  # Using sed to remove XML header/footer cruft
  plutil -extract "$1" xml1 -o - "$2" | sed -e '1,3d;$d'
}

utils_run_yq() {
  yq -r "$1" "${config:?}"
}

utils_check_if_true() {
  if [[ $(utils_run_yq "$1") == "true" ]]; then
    return 0
  else
    return 1
  fi
}

utils_defaults_update() {
  (
    IFS='|' read -r -a array <<< "$item"
    domain="${array[0]}"
    item_key="${array[1]}"
    item_type="${array[2]}"
    item_value="${array[3]}"
    # Fix home path
    item_value="${item_value/\~/$HOME}"
    domain_path="${HOME}/Library/Preferences/${domain}.plist"
    # Insert UUID if required
    # Credit: http://www.commandlinefu.com/commands/view/13592/get-hardware-uuid-in-mac-os-x
    uuid="$(system_profiler SPHardwareDataType | awk '/UUID/ { print $3; }')"
    domain_path="${domain_path/UUID/$uuid}"
    echo "${domain}: ${item_key}"
    existing="$(utils_plutil_extract "${item_key}" "${domain_path}")"
    [[ -z "${existing}" ]] && result="Did not exist" || result="${existing}"
    echo "${colour_error:?}${result}${colour_reset:?}"
    plutil -replace "${item_key}" "-${item_type}" "${item_value}" "${domain_path}"
    result="$(utils_plutil_extract "${item_key}" "${domain_path}")"
    echo "${colour_pass:?}${result}${colour_reset:?}"
    echo
  ) | utils_log_output
}

utils_simple_loop() {
  # This is super fragile and can only be used with simple key/value updates
  # Item keys/values must not contain whitespace or special characters
  utils_print_heading "$1"
  while read -r item; do
    IFS='|' read -r -a array <<< "$item"
    item_key="${array[0]}"
    item_value="${array[1]}"
    $2 "${item_key}" "${item_value}"
    utils_print_status "pass" "${item_key}"
  done
}

utils_simple_update() {
  # This is super fragile and can only be used with simple key/value updates
  # Item keys/values must not contain whitespace or special characters
  echo "$1"
  existing="$($2)"
  [[ -z "${existing}" ]] && result="Did not exist" || result="${existing}"
  echo "${colour_error:?}${result}${colour_reset:?}"
  $3
  result="$($2)"
  echo "${colour_pass:?}${result}${colour_reset:?}"
  echo
}

utils_log_output() {
  tee -a "${log}"
}

utils_type_exists() {
  if [ "$(type -P "$1")" ]; then
    return 0
  fi
  return 1
}

utils_error_exit() {
  utils_print_heading "${1}"
  echo "${@:2}"
  echo
  exit 1
}

trap "utils_error_exit 'Setup did not complete!' 'Received signal SIGHUP.'" SIGHUP
trap "utils_error_exit 'Setup did not complete!' 'Received signal SIGINT.'" SIGINT
trap "utils_error_exit 'Setup did not complete!' 'Received signal SIGTERM.'" SIGTERM
trap "utils_error_exit 'Setup did not complete!' 'Scroll up for more details about what went wrong.'" ERR
